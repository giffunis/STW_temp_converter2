// Generated by CoffeeScript 1.9.0
(function() {
  var coffeeScript, fs, log, path;

  fs = require('fs');

  path = require('path');

  coffeeScript = require('coffee-script');

  log = require('../log');

  module.exports = function(blanket) {
    var oldLoaderCS;
    oldLoaderCS = require.extensions['.coffee'];
    return require.extensions['.coffee'] = function(localModule, filename) {
      var antipattern, content, inputFilename, originalFilename, pattern, reporter_options;
      pattern = blanket.options('filter');
      reporter_options = blanket.options('reporter_options');
      originalFilename = filename;
      inputFilename = filename;
      filename = blanket.normalizeBackslashes(filename);
      antipattern = blanket.options('antifilter');
      if (typeof antipattern !== 'undefined' && blanket.matchPattern(filename.replace(/\.js$/, ""), antipattern)) {
        oldLoaderCS(localModule, filename);
        return log.debug("BLANKET-File will never be instrumented: " + filename);
      } else if (blanket.matchPattern(filename, pattern)) {
        log.debug("BLANKET-Attempting instrument of: " + filename);
        content = fs.readFileSync(filename, 'utf8');
        if (reporter_options && reporter_options.shortnames) {
          inputFilename = filename.replace(process.cwd(), '').replace('/', '');
        }
        if (reporter_options && reporter_options.basepath) {
          inputFilename = filename.replace(reporter_options.basepath + '/', "");
        }
        content = coffeeScript.compile(content);
        return blanket.instrument({
          inputFile: content,
          inputFileName: inputFilename
        }, function(instrumented) {
          var baseDirPath, err;
          baseDirPath = blanket.normalizeBackslashes(path.dirname(filename)) + '/.';
          try {
            instrumented = instrumented.replace(/require\s*\(\s*("|')\./g, 'require($1' + baseDirPath);
            return localModule._compile(instrumented, originalFilename);
          } catch (_error) {
            err = _error;
            log.error('Error parsing instrumented code: ', err);
            throw new Error("BLANKET-Error parsing instrumented code: " + err);
          }
        });
      } else {
        return oldLoaderCS(localModule, originalFilename);
      }
    };
  };

}).call(this);
